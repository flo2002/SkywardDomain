/* Generated By:JavaCC: Do not edit this line. PaymentParser.java */
package fhv.ws22.se.skyward.domain.paymentParser;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.io.StringReader;

public class PaymentParser implements PaymentParserConstants {
    public static List<Payment> parse(String payment) throws ParseException {
        StringReader reader = new StringReader(payment);
        PaymentParser parser = new PaymentParser(reader);
        List<Payment> payments = parser.parse();
        return payments;
    }

  final public List<Payment> parse() throws ParseException {
    List<Payment> payments = new ArrayList<Payment>();
    payments = matchPayment(payments);
      {if (true) return payments;}
    throw new Error("Missing return statement in function");
  }

  final public List<Payment> matchPayment(List<Payment> payments) throws ParseException {
    Payment payment = new Payment();
    payment = matchNameValuePair(payment);
    jj_consume_token(16);
    payment = matchNameValuePair(payment);
    jj_consume_token(16);
    payment = matchNameValuePair(payment);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 16:
      jj_consume_token(16);
      payment = matchNameValuePair(payment);
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    jj_consume_token(SEPERATOR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RES:
    case DATE:
    case AMOUNT:
    case IBAN:
      payments = matchPayment(payments);
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
        payments.add(payment);
        {if (true) return payments;}
    throw new Error("Missing return statement in function");
  }

  final public Payment matchNameValuePair(Payment p) throws ParseException {
    Payment payment = p;
    Token name;
    Token value;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RES:
      name = jj_consume_token(RES);
      jj_consume_token(EQ);
      value = jj_consume_token(NUMBER);
      break;
    case DATE:
      name = jj_consume_token(DATE);
      jj_consume_token(EQ);
      value = jj_consume_token(DATE_TYPE);
      break;
    case AMOUNT:
      name = jj_consume_token(AMOUNT);
      jj_consume_token(EQ);
      value = jj_consume_token(FLOAT);
      break;
    case IBAN:
      name = jj_consume_token(IBAN);
      jj_consume_token(EQ);
      value = jj_consume_token(IBAN_TYPE);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        switch (name.image) {
            case "Res#":
                payment.setRes(Integer.parseInt(value.image));
                break;
            case "Date":
                int year = Integer.parseInt(value.image.substring(5));
                int month = 0;
                int day = Integer.parseInt(value.image.substring(0, 2));

                switch (value.image.substring(2, 5)) {
                    case "JAN":
                        month = 1;
                        break;
                    case "FEB":
                        month = 2;
                        break;
                    case "MAR":
                        month = 3;
                        break;
                    case "APR":
                        month = 4;
                        break;
                    case "MAY":
                        month = 5;
                        break;
                    case "JUN":
                        month = 6;
                        break;
                    case "JUL":
                        month = 7;
                        break;
                    case "AUG":
                        month = 8;
                        break;
                    case "SEP":
                        month = 9;
                        break;
                    case "OCT":
                        month = 10;
                        break;
                    case "NOV":
                        month = 11;
                        break;
                    case "DEC":
                        month = 12;
                        break;
                }

                payment.setDate(LocalDate.of(year, month, day));
                break;
            case "Amount":
                payment.setAmount(Float.parseFloat(value.image));
                break;
            case "IBAN":
                payment.setIban(value.image);
                break;
        }
        {if (true) return payment;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public PaymentParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[3];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x10000,0x3c0,0x3c0,};
   }

  /** Constructor with InputStream. */
  public PaymentParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public PaymentParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new PaymentParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public PaymentParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new PaymentParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public PaymentParser(PaymentParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(PaymentParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[17];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 3; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 17; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
